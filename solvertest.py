import unittest

import solver

class TestSolverMethods(unittest.TestCase):
    def testMergeTwoGrids(self):
        tests = [
            {
                "description": "One extra digit in second grid",
                "grid1": [
                    [0, 5, 0, 0, 0, 0, 0, 0, 4],
                    [9, 0, 0, 4, 3, 0, 0, 0, 0],
                    [0, 0, 0, 2, 0, 9, 3, 8, 0],
                    [0, 9, 0, 0, 7, 0, 4, 5, 0],
                    [3, 0, 0, 0, 0, 2, 0, 0, 0],
                    [8, 7, 0, 0, 0, 0, 0, 1, 3],
                    [5, 0, 1, 0, 0, 8, 0, 0, 0],
                    [7, 0, 9, 3, 1, 0, 5, 6, 8],
                    [6, 0, 4, 7, 2, 5, 0, 3, 9]
                ],
                "grid2": [
                    [2, 5, 0, 0, 0, 0, 0, 0, 4],
                    [9, 0, 0, 4, 3, 0, 0, 0, 0],
                    [0, 0, 0, 2, 0, 9, 3, 8, 0],
                    [0, 9, 0, 0, 7, 0, 4, 5, 0],
                    [3, 0, 0, 0, 0, 2, 0, 0, 0],
                    [8, 7, 0, 0, 0, 0, 0, 1, 3],
                    [5, 0, 1, 0, 0, 8, 0, 0, 0],
                    [7, 0, 9, 3, 1, 0, 5, 6, 8],
                    [6, 0, 4, 7, 2, 5, 0, 3, 9]
                ],
                "want": [
                    [2, 5, 0, 0, 0, 0, 0, 0, 4],
                    [9, 0, 0, 4, 3, 0, 0, 0, 0],
                    [0, 0, 0, 2, 0, 9, 3, 8, 0],
                    [0, 9, 0, 0, 7, 0, 4, 5, 0],
                    [3, 0, 0, 0, 0, 2, 0, 0, 0],
                    [8, 7, 0, 0, 0, 0, 0, 1, 3],
                    [5, 0, 1, 0, 0, 8, 0, 0, 0],
                    [7, 0, 9, 3, 1, 0, 5, 6, 8],
                    [6, 0, 4, 7, 2, 5, 0, 3, 9]
                ]
            },
            {
                "description": "Extra digits in both grid",
                "grid1": [
                    [0, 5, 0, 0, 0, 0, 0, 0, 4],
                    [9, 0, 0, 4, 3, 0, 0, 0, 0],
                    [0, 0, 0, 2, 0, 9, 3, 8, 3],
                    [0, 9, 0, 0, 7, 0, 4, 5, 0],
                    [3, 0, 0, 0, 0, 2, 0, 0, 0],
                    [8, 7, 0, 0, 0, 0, 0, 1, 3],
                    [5, 0, 1, 0, 0, 8, 0, 0, 0],
                    [7, 5, 9, 3, 1, 0, 5, 6, 8],
                    [6, 0, 4, 7, 2, 5, 0, 3, 9]
                ],
                "grid2": [
                    [0, 5, 0, 0, 0, 0, 0, 0, 4],
                    [9, 0, 0, 4, 3, 0, 0, 0, 0],
                    [0, 0, 0, 2, 0, 9, 3, 8, 0],
                    [0, 9, 0, 0, 7, 0, 4, 5, 0],
                    [3, 0, 0, 0, 0, 2, 0, 0, 0],
                    [8, 7, 0, 0, 0, 0, 0, 1, 3],
                    [5, 0, 1, 0, 0, 8, 0, 0, 0],
                    [7, 0, 9, 3, 1, 0, 5, 6, 8],
                    [6, 0, 4, 7, 2, 5, 0, 3, 9]
                ],
                "want": [
                    [0, 5, 0, 0, 0, 0, 0, 0, 4],
                    [9, 0, 0, 4, 3, 0, 0, 0, 0],
                    [0, 0, 0, 2, 0, 9, 3, 8, 3],
                    [0, 9, 0, 0, 7, 0, 4, 5, 0],
                    [3, 0, 0, 0, 0, 2, 0, 0, 0],
                    [8, 7, 0, 0, 0, 0, 0, 1, 3],
                    [5, 0, 1, 0, 0, 8, 0, 0, 0],
                    [7, 5, 9, 3, 1, 0, 5, 6, 8],
                    [6, 0, 4, 7, 2, 5, 0, 3, 9]
                ]
            }
        ]

        for test in tests:
            self.assertEqual(test["want"], solver.mergeTwoGrids(test["grid1"], test["grid2"]))

    def testSolveForOnceCellWithOneDigit(self):
        tests =  [
            {
                "description": "simple example",
                "grid": [
                    [1, 2, 3, 4, 5, 6, 7, 8, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                ],
                "want": [
                    [1, 2, 3, 4, 5, 6, 7, 8, 9],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            },
            {
                "description": "complex example",
                "grid": [
                    [0, 5, 0, 0, 0, 0, 0, 0, 4],
                    [9, 0, 0, 4, 3, 0, 0, 0, 0],
                    [0, 0, 0, 2, 0, 9, 3, 8, 0],
                    [0, 9, 0, 0, 7, 0, 4, 5, 0],
                    [3, 0, 0, 0, 0, 2, 0, 0, 0],
                    [8, 7, 0, 0, 0, 0, 0, 1, 3],
                    [5, 0, 1, 0, 0, 8, 0, 0, 0],
                    [7, 0, 9, 3, 1, 0, 5, 6, 8],
                    [6, 0, 4, 7, 2, 5, 0, 3, 9]
                ],
                "want": [
                    [0, 5, 0, 0, 0, 0, 0, 0, 4],
                    [9, 0, 0, 4, 3, 0, 0, 0, 0],
                    [0, 0, 0, 2, 0, 9, 3, 8, 0],
                    [0, 9, 0, 0, 7, 0, 4, 5, 0],
                    [3, 0, 0, 0, 0, 2, 0, 0, 0],
                    [8, 7, 0, 0, 0, 0, 0, 1, 3],
                    [5, 0, 1, 0, 0, 8, 0, 0, 0],
                    [7, 2, 9, 3, 1, 4, 5, 6, 8],
                    [6, 8, 4, 7, 2, 5, 1, 3, 9]
                ]
            }
        ]

        for test in tests:
            self.assertEqual(test["want"], solver.solveForOneCellWithOneDigit(test["grid"]))

    def testSolveOneDigitInARow(self):
        tests = [
            {
                "describe": "simple example",
                "grid": [
                    [1, 0, 3, 4, 0, 6, 7, 0, 9],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 5, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 5, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                ],
                "want": [
                    [1, 0, 3, 4, 5, 6, 7, 0, 9],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 5, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 5, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            },
            {
                "describe": "complex example",
                "grid": [
                    [0, 5, 0, 0, 0, 0, 0, 0, 4],
                    [9, 0, 0, 4, 3, 0, 0, 0, 0],
                    [0, 0, 0, 2, 0, 9, 3, 8, 0],
                    [0, 9, 0, 0, 7, 0, 4, 5, 0],
                    [3, 0, 0, 0, 0, 2, 0, 0, 0],
                    [8, 7, 0, 0, 0, 0, 0, 1, 3],
                    [5, 0, 1, 0, 0, 8, 0, 0, 0],
                    [7, 0, 9, 3, 1, 0, 5, 6, 8],
                    [6, 0, 4, 7, 2, 5, 0, 3, 9]
                ],
                "want": [
                    [0, 5, 3, 0, 0, 0, 0, 0, 4],
                    [9, 0, 0, 4, 3, 0, 0, 0, 5],
                    [0, 0, 0, 2, 0, 9, 3, 8, 0],
                    [0, 9, 0, 8, 7, 3, 4, 5, 0],
                    [3, 0, 0, 0, 0, 2, 0, 0, 0],
                    [8, 7, 0, 0, 0, 0, 0, 1, 3],
                    [5, 3, 1, 0, 0, 8, 0, 0, 0],
                    [7, 2, 9, 3, 1, 4, 5, 6, 8],
                    [6, 8, 4, 7, 2, 5, 1, 3, 9]
                ]
            }
        ]

        for test in tests:
            self.assertEqual(test["want"], solver.solveOneDigitInARow(test["grid"]))

    def testSolveOneDigitInAColumn(self):
        tests = [
            {
                "describe": "simple example",
                "grid": [
                    [1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 5, 0, 0, 0, 0],
                    [3, 0, 0, 0, 0, 0, 0, 0, 0],
                    [4, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [6, 0, 0, 0, 0, 0, 0, 0, 0],
                    [7, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 5, 0],
                    [9, 0, 0, 0, 0, 0, 0, 0, 0]
                ],
                "want": [
                    [1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 5, 0, 0, 0, 0],
                    [3, 0, 0, 0, 0, 0, 0, 0, 0],
                    [4, 0, 0, 0, 0, 0, 0, 0, 0],
                    [5, 0, 0, 0, 0, 0, 0, 0, 0],
                    [6, 0, 0, 0, 0, 0, 0, 0, 0],
                    [7, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 5, 0],
                    [9, 0, 0, 0, 0, 0, 0, 0, 0]
                ]
            },
            {
                "describe": "complex example",
                "grid": [
                    [0, 5, 0, 0, 0, 0, 0, 0, 4],
                    [9, 0, 0, 4, 3, 0, 0, 0, 0],
                    [0, 0, 0, 2, 0, 9, 3, 8, 0],
                    [0, 9, 0, 0, 7, 0, 4, 5, 0],
                    [3, 0, 0, 0, 0, 2, 0, 0, 0],
                    [8, 7, 0, 0, 0, 0, 0, 1, 3],
                    [5, 0, 1, 0, 0, 8, 0, 0, 0],
                    [7, 0, 9, 3, 1, 0, 5, 6, 8],
                    [6, 0, 4, 7, 2, 5, 0, 3, 9]
                ],
                "want": [
                    [0, 5, 3, 0, 0, 0, 0, 0, 4],
                    [9, 0, 0, 4, 3, 0, 0, 0, 0],
                    [4, 0, 0, 2, 0, 9, 3, 8, 0],
                    [0, 9, 0, 0, 7, 3, 4, 5, 0],
                    [3, 0, 0, 0, 0, 2, 8, 0, 0],
                    [8, 7, 0, 0, 0, 0, 0, 1, 3],
                    [5, 3, 1, 0, 0, 8, 0, 4, 0],
                    [7, 0, 9, 3, 1, 0, 5, 6, 8],
                    [6, 0, 4, 7, 2, 5, 0, 3, 9]
                ]
            }
        ]

        for test in tests:
            self.assertEqual(test["want"], solver.solveOneDigitInAColumn(test["grid"]))

    def testSolveOneDigitIn3x3(self):
        tests = [
            {
                "describe": "simple example",
                "grid": [
                    [1, 2, 0, 0, 0, 0, 0, 0, 0],
                    [4, 0, 6, 0, 0, 0, 0, 0, 0],
                    [7, 8, 9, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 5, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                ],
                "want": [
                    [1, 2, 5, 0, 0, 0, 0, 0, 0],
                    [4, 0, 6, 0, 0, 0, 0, 0, 0],
                    [7, 8, 9, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 5, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            },
            {
                "describe": "complex example",
                "grid": [
                    [0, 5, 0, 0, 0, 0, 0, 0, 4],
                    [9, 0, 0, 4, 3, 0, 0, 0, 0],
                    [0, 0, 0, 2, 0, 9, 3, 8, 0],
                    [0, 9, 0, 0, 7, 0, 4, 5, 0],
                    [3, 0, 0, 0, 0, 2, 0, 0, 0],
                    [8, 7, 0, 0, 0, 0, 0, 1, 3],
                    [5, 0, 1, 0, 0, 8, 0, 0, 0],
                    [7, 0, 9, 3, 1, 0, 5, 6, 8],
                    [6, 0, 4, 7, 2, 5, 0, 3, 9]
                ],
                "want": [
                    [0, 5, 3, 0, 0, 0, 0, 0, 4],
                    [9, 0, 0, 4, 3, 0, 0, 0, 0],
                    [0, 0, 0, 2, 5, 9, 3, 8, 0],
                    [0, 9, 0, 0, 7, 3, 4, 5, 0],
                    [3, 4, 0, 0, 0, 2, 8, 0, 0],
                    [8, 7, 0, 0, 0, 0, 0, 1, 3],
                    [5, 3, 1, 0, 0, 8, 0, 4, 0],
                    [7, 0, 9, 3, 1, 0, 5, 6, 8],
                    [6, 8, 4, 7, 2, 5, 1, 3, 9]
                ]
            }
        ]

        for test in tests:
            self.assertEqual(test["want"], solver.solveOneDigitIn3x3(test["grid"]))

    if __name__ == '__main__':
        unittest.main()